/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rybinski.navqcreader.tabledata.editor;

import java.awt.Color;
import java.awt.Component;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.text.DecimalFormat;
import java.util.Collection;
import java.util.Collections;
import java.util.logging.Level;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.LifecycleManager;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import rybinski.navqcreader.tabledata.DataBox;
import rybinski.navqcreader.tabledata.impl.DataFileTableModel;
import rybinski.navqcreader.tabledata.DataManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//rybinski.navqcreader.tabledata.editor//TableTadaEditorTopComponent//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "TableTadaEditorTopComponentTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "rybinski.navqcreader.tabledata.editor.TableTadaEditorTopComponentTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_TableTadaEditorTopComponentAction",
        preferredID = "TableTadaEditorTopComponentTopComponent"
)
@Messages({
    "CTL_TableTadaEditorTopComponentAction=TableTadaEditorTopComponent",
    "CTL_TableTadaEditorTopComponentTopComponent=TableTadaEditorTopComponent Window",
    "HINT_TableTadaEditorTopComponentTopComponent=This is a TableTadaEditorTopComponent window"
})
public final class TableDataEditorTopComponent extends TopComponent implements LookupListener {

    private static DataFileTableModel tableModel;
    private final InstanceContent instanceContent = new InstanceContent();
    private Lookup.Result<DataFileTableModel> lookupResult = null;
    private Lookup.Result<DataBox> lookupResultDb = null;

    public TableDataEditorTopComponent() {

//tableModel = Lookup.getDefault().lookup(DataFileTableModel.class);
        //tableModel = this.getLookup().lookup(DataFileTableModel.class);
        //this.instanceContent.add(tableModel);
        initComponents();
        setName(Bundle.CTL_TableTadaEditorTopComponentTopComponent());
        setToolTipText(Bundle.HINT_TableTadaEditorTopComponentTopComponent());
        //this.associateLookup(new AbstractLookup(instanceContent));
        //instanceContent.set(Collections.singleton(tableModel), null);       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        table.setGridColor(Color.DARK_GRAY);

        TableDataEditorTopComponent.DecimalFormatRenderer renderer = new TableDataEditorTopComponent.DecimalFormatRenderer();
        renderer.setHorizontalAlignment(JLabel.RIGHT);
        for (int i = 0; i < table.getColumnCount(); i++) {
            table.getColumnModel().getColumn(i).setCellRenderer(renderer);
        }
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        System.out.println("-----------seopend ");
        /*ftm = Lookup.getDefault().lookup(FamilyTreeManager.class);
        if (ftm == null) {
            logger.log(Level.SEVERE, "Cannot get FamilyTreeManager object");
            LifecycleManager.getDefault().exit();
        }*/
        // configureListeners();

        // Listen for Person objects in the Global Selection lookup
        /*lookupResult = Utilities.actionsGlobalContext().lookupResult(DataFileTableModel.class);
        lookupResult.addLookupListener(this);
        Collection<? extends DataFileTableModel> allEvents = lookupResult.allInstances();
        if (allEvents.isEmpty()==false) {
            tableModel = allEvents.iterator().next();
            this.table.setModel(tableModel);
            System.out.println("setttted model ");
            
        } else {System.out.println("did nothing ");*/
//lookupResultDb = Utilities.actionsGlobalContext().lookupResult(DataBox.class);
        DataManager dm = Lookup.getDefault().lookup(DataManager.class);
        
        System.out.println("============did got DataManager ");
        if (dm.getTableModel()!=null){
        this.table.setModel(dm.getTableModel());
        System.out.println("============set model!!!!!! ");
        }
        //lookupResultDb.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
        //lookupResult.removeLookupListener(this);

    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent le) {
        Collection<? extends DataBox> allEvents = lookupResultDb.allInstances();
        if (allEvents.isEmpty() == false) {
            DataBox db = DataBox.getInstance();
            db = allEvents.iterator().next();

            System.out.println("got db " + db.getElementAt(0).toString());

        } else {
            System.out.println("did nothing ");
//lookupResult.addLookupListener(lookupListener);
            //checkLookup();
            // TODO add custom code on component opening
        }//To change body of generated methods, choose Tools | Templates.
    }

    private static class DecimalFormatRenderer extends DefaultTableCellRenderer {

        private static final DecimalFormat formatter = new DecimalFormat("#.0");

        @Override
        public Component getTableCellRendererComponent(
                JTable table, Object value,
                boolean isSelected,
                boolean hasFocus,
                int row,
                int column) {
            value = formatter.format((Number) value);
            return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        }
    }
}
